<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script
      src="https://code.jquery.com/jquery-3.7.0.min.js"
      integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    />
    <title>REPLAYZER</title>
    <style>
      body {
        background-color: #1e1424;
        position: relative;
      }
      .logo {
        width: 100%;
        display: flex;
        justify-content: center;
      }
      .logo-img {
        cursor: pointer;
      }
      #list {
        list-style: none;
        padding-left: 0;
      }
      #list-item {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        cursor: pointer;
        align-items: center;
        border-style: solid;
        border-width: 1px;
        border-color: #f0f8ff;
        border-radius: 5px;
        font-size: 20px;
        margin: 10px;
        padding: 5px;
        background-color: #d4e9ed;
      }
      .uploader {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 80px;
        height: 30px;
        cursor: pointer;
        margin: 5px;
        padding: 1px;
        border-style: solid;
        border-radius: 5px;
        border-width: 1px;
        border-color: #accfff;
        color: black;
        background-color: white;
        font-size: 15px;
      }
      .uploader:hover {
        background-color: #b7b7e4;
        color: white;
      }
      #replay-upload {
        position: absolute;
        width: 0;
        height: 0;
        padding: 0;
        overflow: hidden;
        border: 0;
      }
      .header {
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
      .upload-button {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 80px;
        height: 33px;
        margin: 5px;
        padding: 1px;
        cursor: pointer;
        border-style: solid;
        border-radius: 5px;
        border-width: 1px;
        font-size: 15px;
        border-color: #accfff;
        color: black;
        background-color: white;
      }
      .upload-button:hover {
        border-style: none;
        background-color: #b7b7e4;
        color: white;
      }
      .cover {
        position: absolute;
        top: 0;
        /* width: 90vw; */
        width: 100vw;
        height: 100%;
        padding: 8px;
        border-radius: 5px;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 2;
        display: none;
        flex-direction: column;
        align-items: center;
        /* justify-content: center; */
      }
      .upload-section {
        top: 90px;
        width: 90vw;
        min-height: 320px;
        height: 65vh;
        background-color: white;
        border-radius: 5px;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        display: flex;
        padding: 8px;
        position: relative;
        /* 
        background-color: white; */
      }
      .section-top-area {
        position: absolute;
        top: 5px;
        right: 5px;
        width: 100%;
        display: flex;
        justify-content: end;
      }
      .file-text {
        margin: 0;
        padding: 0;
      }
      .search-line {
        margin: 2px;
        display: flex;
        justify-content: center;
        align-items: center;
      }
      .search-input {
        font-size: 20px;
      }
      .warn {
        font-size: 10px;
        color: red;
        display: none;
        flex-direction: column;
        justify-content: center;
      }
      .warn-item {
        text-align: center;
      }
      .search-type {
        color: white;
      }
    </style>
  </head>
  <body>
    <div class="logo">
      <img
        class="logo-img"
        src="https://i.imgur.com/RHi1T2Q.png"
        onclick="refresh()"
      />
    </div>
    <form>
      <div class="header">
        <!-- <button onclick="temp4()">도니</button> -->
        <button type="button" class="upload-button" onclick="sectionHandler()">
          <p class="file-text">
            <i class="fa-solid fa-arrow-up-from-bracket"></i>
          </p>
        </button>
        <div class="search-type">
          <span
            >TITLE SEARCH<input
              name="search-type"
              value="proper"
              type="radio"
              checked
          /></span>
          <span
            >CODE SEARCH<input name="search-type" value="code" type="radio"
          /></span>
        </div>
        <div class="cover" onclick="sectionHandler()">
          <div class="upload-section">
            <div class="section-top-area">
              <i
                class="fa-solid fa-xmark"
                style="cursor: pointer"
                onclick="sectionHandler()"
              ></i>
            </div>
            <input
              type="file"
              id="replay-upload"
              name="replay-upload"
              onchange="stateUpdate(this)"
            />
            <label for="replay-upload">
              <div class="uploader"><p class="file-text">SELECT</p></div>
            </label>
            <br />
            <div>제목</div>
            <input id="filename" type="text" />
            <br />
            <div>비밀번호 설정</div>
            <div>(주의: 미설정시 랜덤값 지정)</div>
            <input id="filepassword" type="password" />
            <br />
            잠금 설정
            <div>
              <span
                >공개<input
                  name="private"
                  value="true"
                  type="radio"
                  checked
                  onchange="checker(this)"
              /></span>
              <span
                >비공개<input
                  name="private"
                  value="false"
                  type="radio"
                  onchange="checker(this)"
              /></span>
            </div>
            <div class="warn">
              <div class="warn-item">비공개전환시 고유코드가 발급되며</div>
              <div class="warn-item">고유코드로 검색시에만 노출됩니다</div>
              <div class="warn-item">
                비밀번호와 발급코드를 모두 저장해두세요
              </div>
              <div class="warn-item">(비밀번호: 삭제용 / 발급코드: 검색용)</div>
            </div>
            <br />
            <button
              id="upload-button"
              class="upload-button"
              type="button"
              onclick="upload2()"
            >
              <p class="file-text">UPLOAD</p>
            </button>
          </div>
        </div>
        <!-- <input
          type="file"
          id="replay-upload"
          name="replay-upload"
          onchange="stateUpdate(this)"
        />
        <label for="replay-upload">
          <div class="uploader"><p class="file-text">SELECT</p></div>
        </label>
        <button class="upload-button" type="button" onclick="upload()">
          <p class="file-text">
            <i class="fa-solid fa-arrow-up-from-bracket"></i>
          </p>
        </button> -->
      </div>
    </form>
    <div class="search-line">
      <button class="upload-button" onclick="refresh()">
        <i class="fa-solid fa-arrows-rotate"></i>
      </button>
      <input class="search-input" type="text" onkeyup="enterHandler(this)" />
      <button
        type="button"
        class="upload-button"
        onclick="searchAfterCountReset()"
      >
        <p class="file-text">SEARCH</p>
      </button>
    </div>
    <ul id="list"></ul>
    <div
      id="loader"
      style="text-align: center; color: #ffffff; cursor: pointer"
      onclick="loadLists()"
    >
      Load more
    </div>
    <script>
      // const temp4 = async () => {
      //   await axios({
      //     method: 'post',
      //     url: '/temp',
      //     data: [],
      //   });
      // };

      let count = 0;
      let searchKeyword = '';
      let searchPage = 0;
      const loadLists = async () => {
        if (!searchKeyword) {
          axios({
            method: 'get',
            url: `/get_list/${++count}`,
          }).then((res) => {
            let list = res.data.data;
            if (list.length > 0) {
              let ul = document.querySelector('#list');
              for (let i = 0; i < list.length; i++) {
                let li = document.createElement('li');
                li.id = 'list-item';
                let fileid = list[i].fileid;
                let titleArea = document.createElement('div');
                let commentArea = document.createElement('div');
                let title = list[i].title.replace('_', ' ');
                titleArea.innerText = title;
                titleArea.style.cssText = `
                  max-width: 75%;
                  overflow: hidden;
                  white-space: nowrap;
                  text-overflow: ellipsis;
                  word-break: break-all;
                `;
                let commentNum = list[i].commentNum;
                if (commentNum !== 0 && list[i].locked == 'true') {
                  commentArea.style.cssText = `
                color: #0066ff;
                font-weight: 900;
              `;
                }
                if (list[i].locked == 'true') {
                  //공개일때
                  commentArea.innerHTML = `[${commentNum}] &nbsp`;
                  let deleter = document.createElement('i');
                  deleter.classList.add('fa-solid');
                  deleter.classList.add('fa-xmark');
                  deleter.onclick = (e) => {
                    e.stopPropagation();
                    e.preventDefault();
                    replayDeleter(list[i].filePassword, list[i].fileid);
                  };
                  commentArea.appendChild(deleter);
                } else {
                  //비공개일때
                  continue;
                  // let locker = document.createElement('span');
                  // locker.innerHTML = `<i class="fa-solid fa-lock"></i> &nbsp`;
                  // let deleter = document.createElement('i');
                  // deleter.classList.add('fa-solid');
                  // deleter.classList.add('fa-xmark');
                  // deleter.onclick = (e) => {
                  //   e.stopPropagation();
                  //   e.preventDefault();
                  //   replayDeleter(list[i].filePassword, list[i].fileid);
                  // };
                  // locker.appendChild(deleter);
                  // commentArea.appendChild(locker);
                }
                li.appendChild(titleArea);
                li.appendChild(commentArea);
                li.onclick = () => {
                  if (list[i].locked == 'true') {
                    window.location.href = `/replay/${fileid}`;
                  } else {
                    let prompt =
                      window.prompt('입장 : 비밀번호를 입력해주세요');
                    if (prompt == list[i].filePassword) {
                      window.location.href = `/replay/${list[i].privateURL}`;
                    }
                  }
                };
                ul.append(li);
              }
              // count++;
              // console.log(ul.children.length);
              if (ul.children.length < 10) {
                loadLists();
              }
              if (list.length < 10) {
                loadLists();
              }
            } else {
              let loader = document.querySelector('#loader');
              loader.innerText = 'No more data';
            }
          });
        } else {
          var sel_type = '';
          var chk_radio = document.getElementsByName('search-type');
          for (var i = 0; i < chk_radio.length; i++) {
            if (chk_radio[i].checked == true) {
              sel_type = chk_radio[i].value;
            }
          }
          if (sel_type == 'proper') {
            search();
          }
        }
      };
      let observer = new IntersectionObserver(loadLists);
      let loader = document.querySelector('#loader');
      observer.observe(loader);

      const stateUpdate = (files) => {
        if (files.files[0].type !== 'text/html') {
          alert('리플레이 파일만 올릴 수 있습니다');
          $('#replay-upload').val('');
        }
        const READER = new FileReader();
        READER.readAsText(files.files[0], 'EUC-KR');
        let str = '';
        READER.onload = function (e) {
          str = e.target.result;
          if (
            str.includes(
              'html,body {font-family:Verdana, sans-serif;font-size:10pt;margin:0;padding:0;}body{padding:12px 0;} .battle-log {font-family:Verdana, sans-serif;font-size:10pt;} .battle-log-inline {border:1px solid #AAAAAA;background:#EEF2F5;color:black;max-width:640px;margin:0 auto 80px;padding-bottom:5px;} .battle-log .inner {padding:4px 8px 0px 8px;} .battle-log .inner-preempt {padding:0 8px 4px 8px;} .battle-log .inner-after {margin-top:0.5em;} .battle-log h2 {margin:0.5em -8px;padding:4px 8px;border:1px solid #AAAAAA;background:#E0E7EA;border-left:0;border-right:0;font-family:Verdana, sans-serif;font-size:13pt;} .battle-log .chat {vertical-',
            )
          ) {
            if (files.files.length > 0) {
              document.querySelector('#upload-button').style.cssText = `
                background-color : orange;
                color: white;
                border-color: yellow;
                `;
            }
          } else {
            alert('리플레이 파일만 올릴 수 있습니다');
            $('#replay-upload').val('');
          }
        };
      };

      const upload = async () => {
        const file = document.querySelector('#replay-upload');
        if (file.files.length == 0) {
          alert('파일을 선택해주세요');
          return;
        }
        let prompt = window.prompt('업로드할 리플레이의 제목을 작성해주세요');
        if (prompt == null) {
          return;
        }
        if (prompt.length > 0) {
          if (prompt.length > 100) {
            alert('제목은 100글자 아래로 설정해주세요');
            return;
          }
          prompt = prompt.replace(' ', '_');
          const formData = new FormData();
          formData.append('title', prompt);
          formData.append('replay-upload', file.files[0]);
          let res = await axios({
            method: 'post',
            url: '/replay_upload',
            data: formData,
            headers: {
              'Content-Type': 'multipart/form-data',
            },
          });
          if (res.data.status == '성공') {
            alert('업로드 성공');
            window.location.reload();
          } else {
            alert('업로드 실패');
          }
        } else {
          alert('제목은 한 글자 이상 적어주세요');
          upload();
        }
      };

      const upload2 = async () => {
        const file = document.querySelector('#replay-upload');
        if (file.files.length == 0) {
          alert('파일을 선택해주세요');
          return;
        }
        let isname = document.querySelector('#filename');
        if (isname.value.length <= 0) {
          alert('파일이름을 설정해주세요');
          return;
        }
        if (isname.value.length > 100) {
          alert('제목은 100글자 아래로 설정해주세요');
          return;
        }
        let nameConfirmed = isname.value.replace(' ', '_');
        let pwConfirmed = document.querySelector('#filepassword').value;
        let initPW = pwConfirmed;
        if (pwConfirmed.length <= 0) {
          pwConfirmed = pwGenerator();
        }
        var chk_radio = document.getElementsByName('private');
        var sel_type;
        for (var i = 0; i < chk_radio.length; i++) {
          if (chk_radio[i].checked == true) {
            sel_type = chk_radio[i].value;
          }
        }
        let myUrl = '';
        if (sel_type == 'false') {
          let tempUrl = pwGenerator();
          while (tempUrl.length == 100) {
            if (tempUrl.length < 100) {
              tempUrl += pwGenerator();
            }
            if (tempUrl.length > 100) {
              tempUrl = tempUrl.split('');
              tempUrl.splice(0, 100);
              tempUrl = tempUrl.join('');
            }
          }
          myUrl = tempUrl + Date.now();
        } else {
          myUrl = 'none';
        }
        if (sel_type == 'false' && initPW.length <= 0) {
          alert('비공개로 업로드시 비밀번호를 꼭 설정해주세요');
          return;
        }
        const formData = new FormData();
        formData.append('title', nameConfirmed);
        formData.append('replay-upload', file.files[0]);
        formData.append('password', pwConfirmed);
        formData.append('locked', sel_type);
        formData.append('privateURL', myUrl);
        let res = await axios({
          method: 'post',
          url: '/replay_upload',
          data: formData,
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
        if (res.data.status == '성공') {
          if (sel_type == 'false') {
            // alert(`업로드 성공 \n고유코드: ${myUrl}`);
            // await navigator.clipboard.writeText(myUrl);
            window.prompt(`업로드 성공 \n고유코드를 복사해두세요`, myUrl);
            window.location.reload();
          } else {
            alert('업로드 성공');
            window.location.reload();
          }
        } else {
          alert('업로드 실패');
        }
      };

      const replayDeleter = async (pw, id) => {
        let prompt = window.prompt('삭제 : 비밀번호를 입력해주세요');
        if (prompt) {
          if (prompt == pw) {
            let res = await axios({
              method: 'post',
              url: '/replay_delete',
              data: { id },
            });
            if (res.data.status == '성공') {
              alert('리플레이가 삭제되었습니다');
              window.location.reload();
            } else {
              alert('리플레이가 삭제 실패');
            }
          } else {
            alert('비밀번호를 확인해주세요');
          }
        }
      };

      const checker = (which) => {
        let show = document.querySelector('.warn');
        if (which.value == 'false') {
          show.style.display = 'flex';
        } else {
          show.style.display = 'none';
        }
      };

      const pwGenerator = () => {
        let pwConfirmed = '';
        let tempPW = '' + Date.now();
        let str = '';
        let mix = [
          'poiuytef43tfrds',
          '1qw2ewr4fty6u7',
          'wqe2sd1',
          'dczvghvz73',
          'asdfsvghjk',
          'zxcvg35h787ybnm',
          'd241e3',
          '23P',
          '6',
          '6',
          '9',
          '029eDF53',
          '0wsdf7bek45udbx112e9fb203hedw',
          '237ergg34uu7jlhd',
          'POfeIUYeT1RsdDS',
          'LKJHdvff3243GVCX',
          'NBVCXwd7efPOIUYfewTR',
          'pp4r317d1g645g131frg1GWD1t',
          'ete7t3g3r479re',
          '090xcvh0hdj2',
          '66plz4',
          'qed7ood71162hdfb0239f84FgDDifjdjD2',
          'efoxcvejro3fdffcFGASIj97DNGPDFIdshwdFOafKDFc',
          'E987jtbebdbxgcbhyyj5',
          '213ed1e',
          'we2ee34',
          '20dExc444zvzcxvEeewjg',
          '55DEw25fewdefwc',
        ];
        mix.sort(() => Math.random() - 0.5);
        for (let i = 0; i < tempPW.length; i++) {
          let each = mix[+tempPW[i]];
          let tempEach = each.split('');
          tempEach.sort(() => Math.random() - 0.5);
          tempEach = tempEach.join('');
          str += tempEach;
        }
        pwConfirmed = str;
        if (pwConfirmed.length > 500) {
          let temp = pwConfirmed.split('');
          temp.splice(0, 499);
          pwConfirmed = temp;
        }
        return pwConfirmed;
      };

      const enterHandler = () => {
        if (window.event.keyCode == 13) {
          searchAfterCountReset();
        }
      };

      const searchAfterCountReset = () => {
        let loader = document.querySelector('#loader');
        loader.innerText = 'Load more';
        searchPage = 0;
        search();
        console.log('에에??');
      };

      const search = async () => {
        console.log('네??');
        let keyword = document.querySelector('.search-input').value;
        keyword = keyword.replace(' ', '_');
        searchKeyword = keyword;
        var chk_radio = document.getElementsByName('search-type');
        var sel_type = '';
        for (var i = 0; i < chk_radio.length; i++) {
          if (chk_radio[i].checked == true) {
            sel_type = chk_radio[i].value;
          }
        }
        let res;
        if (sel_type == 'proper') {
          res = await axios({
            method: 'post',
            url: '/search',
            data: { keyword: keyword, page: ++searchPage },
          });
        } else {
          res = await axios({
            method: 'post',
            url: '/searchByCode',
            data: { keyword: keyword },
          });
        }
        if (res.data.status == '성공') {
          // console.log('성공~');
          let list = res.data.data;
          if (list.length > 0) {
            let ul = document.querySelector('#list');
            if (searchPage == 1) {
              ul.innerHTML = '';
            }
            for (let i = 0; i < list.length; i++) {
              let li = document.createElement('li');
              li.id = 'list-item';
              let fileid = list[i].fileid;
              let titleArea = document.createElement('div');
              let commentArea = document.createElement('div');
              let title = list[i].title.replace('_', ' ');
              titleArea.innerText = title;
              titleArea.style.cssText = `
                  max-width: 75%;
                  overflow: hidden;
                  white-space: nowrap;
                  text-overflow: ellipsis;
                  word-break: break-all;
                `;
              let commentNum = list[i].commentNum;
              if (commentNum !== 0 && list[i].locked == 'true') {
                commentArea.style.cssText = `
                color: #0066ff;
                font-weight: 900;
              `;
              }
              if (list[i].locked == 'true') {
                //공개일때
                commentArea.innerHTML = `[${commentNum}] &nbsp`;
                let deleter = document.createElement('i');
                deleter.classList.add('fa-solid');
                deleter.classList.add('fa-xmark');
                deleter.onclick = (e) => {
                  e.stopPropagation();
                  e.preventDefault();
                  replayDeleter(list[i].filePassword, list[i].fileid);
                };
                commentArea.appendChild(deleter);
              } else {
                //비공개일때
                if (sel_type == 'proper') {
                  continue;
                } else {
                  ul.innerHTML = '';
                  let locker = document.createElement('span');
                  locker.innerHTML = `<i class="fa-solid fa-lock"></i> &nbsp`;
                  let deleter = document.createElement('i');
                  deleter.classList.add('fa-solid');
                  deleter.classList.add('fa-xmark');
                  deleter.onclick = (e) => {
                    e.stopPropagation();
                    e.preventDefault();
                    replayDeleter(list[i].filePassword, list[i].fileid);
                  };
                  locker.appendChild(deleter);
                  commentArea.appendChild(locker);
                }
              }
              li.appendChild(titleArea);
              li.appendChild(commentArea);
              li.onclick = () => {
                if (list[i].locked == 'true') {
                  window.location.href = `/replay/${fileid}`;
                } else {
                  let prompt = window.prompt('입장 : 비밀번호를 입력해주세요');
                  if (prompt == list[i].filePassword) {
                    window.location.href = `/replay/${list[i].privateURL}`;
                  }
                }
              };
              ul.append(li);
            }
            if (list.length < 10) {
              let loader = document.querySelector('#loader');
              if (sel_type == 'proper') {
                search();
              } else {
                loader.innerText = '';
              }
            }
          } else {
            if (searchPage == 1) {
              let ul = document.querySelector('#list');
              ul.innerHTML = '';
            }
            let loader = document.querySelector('#loader');
            loader.innerText = 'No more data';
          }
        } else {
          let ul = document.querySelector('#list');
          ul.innerHTML = '';
          let loader = document.querySelector('#loader');
          loader.innerText = 'No more data';
        }
      };

      const sectionHandler = () => {
        if (document.querySelector('.cover').style.display == 'flex') {
          document.querySelector('.cover').style.display = 'none';
          let body = document.getElementsByTagName('body')[0];
          body.style.overflow = 'auto';
        } else {
          document.querySelector('.cover').style.display = 'flex';
          let body = document.getElementsByTagName('body')[0];
          body.style.overflow = 'hidden';
        }
      };

      document
        .querySelector('.upload-section')
        .addEventListener('click', (e) => {
          e.stopPropagation();
        });

      const refresh = () => {
        window.location.reload();
      };
    </script>
  </body>
</html>
