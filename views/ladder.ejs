<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script
      src="https://code.jquery.com/jquery-3.7.0.min.js"
      integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lobster&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    />

    <title>REPLAYZER</title>
    <style>
      body {
        background-color: #1e1424;
        position: relative;
      }
      .logo {
        width: 100%;
        display: flex;
        justify-content: center;
      }
      .logo-img {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        cursor: pointer;
      }
      .place {
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      .winners-celeb-text {
        cursor: pointer;
        font-family: 'Lobster', sans-serif;
        font-weight: 400;
        font-style: normal;
        color: white;
        font-size: 51px;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-image: linear-gradient(
          175deg,
          orange,
          orange,
          orange,
          yellow,
          yellow,
          white,
          yellow,
          yellow,
          orange,
          orange,
          orange
        );
        background-clip: text;
        -webkit-background-clip: text;
        color: transparent;
      }
      .cover {
        position: absolute;
        top: 0;
        /* width: 90vw; */
        width: 100vw;
        height: 100%;
        min-height: 800px;
        padding: 8px;
        border-radius: 5px;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 2;
        display: none;
        flex-direction: column;
        align-items: center;
        /* justify-content: center; */
      }
      .upload-section {
        overflow: auto;
        top: 40px;
        width: 90vw;
        min-height: 320px;
        height: 65vh;
        background-color: white;
        border-radius: 5px;
        flex-direction: column;
        align-items: center;
        display: flex;
        padding: 20px;
        box-sizing: border-box;
        position: sticky;
      }
      .section-top-area {
        position: absolute;
        top: 5px;
        right: 5px;
        width: 100%;
        display: flex;
        justify-content: end;
      }
      .uploader {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 80px;
        height: 30px;
        cursor: pointer;
        margin: 5px;
        padding: 1px;
        border-style: solid;
        border-radius: 5px;
        border-width: 1px;
        border-color: #accfff;
        color: black;
        background-color: white;
        font-size: 15px;
      }
      #card-upload {
        position: absolute;
        width: 0;
        height: 0;
        padding: 0;
        overflow: hidden;
        border: 0;
      }
      .upload-button {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 20px;
        height: 33px;
        margin: 5px;
        padding: 1px;
        cursor: pointer;
        border: none;
        border-radius: 5px;
        font-size: 15px;
        color: white;
        background-color: transparent;
      }
      .logo-img {
        width: 80%;
        max-width: 300px;
      }
      .up-button {
        width: 90vw;
        max-width: 600px;
        display: flex;
        justify-content: end;
      }
      .upload-button2 {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 80px;
        height: 33px;
        margin: 5px;
        padding: 1px;
        cursor: pointer;
        border-style: solid;
        border-radius: 5px;
        border-width: 1px;
        font-size: 15px;
        border-color: #ccc;
        color: black;
        background-color: white;
      }
      .upload-button2:hover {
        border-style: none;
        background-color: #b7b7e4;
        color: white;
      }
      .ladder-table {
        border-color: #ccc;
      }
      td {
        color: white;
      }
      tr {
        color: white;
      }
      .data-input {
        resize: none;
        width: 80%;
        height: 50%;
        border: 1px solid #ccc;
      }
      textarea:focus {
        outline: none;
      }
      .update-dater {
        color: white;
        font-size: 10px;
      }
      .warn {
        color: red;
        font-size: 10px;
      }
      @font-face {
        font-family: 'TTHakgyoansimUndongjangL';
        src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2402_keris@1.0/TTHakgyoansimUndongjangL.woff2')
          format('woff2');
        font-weight: 300;
        font-style: normal;
      }
      .updating {
        font-family: 'TTHakgyoansimUndongjangL';
        background-color: rgba(0, 0, 0, 0.5);
        width: 100%;
        height: 100vh;
        position: absolute;
        display: none;
        justify-content: center;
        align-items: center;
        font-size: 50px;
        color: white;
      }
    </style>
  </head>
  <body>
    <div class="updating">
      <div>UPDATING...</div>
    </div>
    <div class="logo">
      <img class="logo-img" src="default/rank.png" onclick="refresh()" />
    </div>
    <div class="place">
      <div class="winners-celeb-text" onclick="refresh()">Ladder</div>
      <div class="cover" onclick="sectionHandler()">
        <div class="upload-section">
          <div class="section-top-area">
            <i
              class="fa-solid fa-xmark"
              style="cursor: pointer"
              onclick="sectionHandler()"
            ></i>
          </div>
          <textarea class="data-input"></textarea>
          <div>
            <span
              >채팅텍스트<input
                name="typical"
                value="standard"
                type="radio"
                checked
            /></span>
            <span>로그<input name="typical" value="log" type="radio" /></span>
          </div>
          <div class="warn">
            (기본적으로 로그는 사용하지 않으므로 클릭하지 마세요)
          </div>
          <!-- 2월 23일 되면 2로 수정 -->
          <button class="upload-button2" onclick="updateResult2()">
            SUBMIT
          </button>
        </div>
      </div>
      <br />
      <br />
      <table class="ladder-table" border="1">
        <th>순위</th>
        <th>닉네임</th>
        <th>점수</th>
      </table>
      <div class="update-dater">Last Update :</div>
      <div class="up-button">
        <button class="upload-button" onclick="unlock()">
          <i class="fa-solid fa-arrow-up-from-bracket"></i>
        </button>
      </div>
      <br />
    </div>
    <script>
      let pw = [];
      axios({
        method: 'get',
        url: '/getLadder',
      }).then(async (res) => {
        let table = document.querySelector('.ladder-table');
        let order = 0;
        let present = 0;
        let carry = 0;
        let sorted = res.data.data.slice();
        pw = res.data.pw;
        sorted.sort((x, y) => y.score - x.score);
        let lastDate = [];
        for (let i = 0; i < sorted.length; i++) {
          let tr = document.createElement('tr');
          let rankOrder = document.createElement('td');
          let user = document.createElement('td');
          let score = document.createElement('td');
          if (present == sorted[i].score) {
            carry++;
            rankOrder.innerText = order;
            user.innerText = sorted[i].user;
            if (String(sorted[i].score).includes('.')) {
              score.innerText = String(sorted[i].score).padEnd(8, '0');
            } else {
              let processing = String(sorted[i].score) + '.';
              score.innerText = processing.padEnd(8, '0');
            }
          } else {
            order += 1;
            rankOrder.innerText = order + carry;
            user.innerText = sorted[i].user;
            if (String(sorted[i].score).includes('.')) {
              score.innerText = String(sorted[i].score).padEnd(8, '0');
            } else {
              let processing = String(sorted[i].score) + '.';
              score.innerText = processing.padEnd(8, '0');
            }
            present = sorted[i].score;
            order = order + carry;
            carry = 0;
          }
          const inputDateString = sorted[i].updatedAt;
          const utcDate = new Date(inputDateString);
          const koreaTime = new Date(utcDate.getTime() + 9 * 60 * 60 * 1000);
          const koreaTimeString = koreaTime
            .toISOString()
            .replace('T', ' ')
            .replace('.000Z', '');
          lastDate.push(koreaTimeString);
          tr.appendChild(rankOrder);
          tr.appendChild(user);
          tr.appendChild(score);
          table.appendChild(tr);
        }
        let lastUpdate = lastDate.sort().reverse()[0];
        let dater = document.querySelector('.update-dater');
        if (lastUpdate) {
          dater.innerText += ` ${lastUpdate}`;
        } else {
          dater.innerText += ' not yet';
        }
        // 2월 23일에 해방 cmain쪽도 해방하기
        //@@@@@@@@@@@@@@
        let res2 = await axios({
          method: 'post',
          url: '/decay',
          data: [],
        });
      });

      const unlock = () => {
        let prompt = window.prompt('비밀번호를 입력해주세요');
        if (pw.includes(prompt)) {
          sectionHandler();
        } else {
          if (prompt) {
            alert('비밀번호를 확인해주세요');
          }
        }
      };

      const sectionHandler = () => {
        if (document.querySelector('.cover').style.display == 'flex') {
          document.querySelector('.cover').style.display = 'none';
          let body = document.getElementsByTagName('body')[0];
          body.style.overflow = 'auto';
        } else {
          document.querySelector('.cover').style.display = 'flex';
          let body = document.getElementsByTagName('body')[0];
          body.style.overflow = 'hidden';
        }
      };

      const refresh = () => {
        window.location.reload();
      };

      const updateResult = async () => {
        sectionHandler();
        var chk_radio = document.getElementsByName('typical');
        var sel_type = '';
        for (var i = 0; i < chk_radio.length; i++) {
          if (chk_radio[i].checked == true) {
            sel_type = chk_radio[i].value;
          }
        }
        if (sel_type == 'standard') {
          let text = document.querySelector('.data-input');
          let splited = text.value.split('\n');
          let obj = {};
          for (let i = 0; i < splited.length; i++) {
            if (
              splited[i].includes('has') &&
              splited[i].includes('match') &&
              !splited[i].includes(':')
            ) {
              let secondTask = splited[i].split(' ');
              let frontName = '';
              let flag = 'false';
              let count = 0;
              while (flag == 'false') {
                if (secondTask[count] == 'has') {
                  flag = 'true';
                  break;
                } else {
                  frontName += ` ${secondTask[count]}`;
                  count++;
                }
              }
              let lastName = '';
              let flag2 = 'false';
              let count2 = 0;
              while (secondTask.length > count2) {
                if (secondTask[count2] == 'against') {
                  flag2 = 'true';
                }
                if (secondTask[count2] !== 'against' && flag2 == 'true') {
                  lastName += ` ${secondTask[count2]}`;
                }
                count2++;
              }
              if (lastName[lastName.length - 1] == '.') {
                lastName = lastName.slice(0, lastName.length - 1);
              }
              obj[frontName.trim().toLowerCase()] = 0;
              obj[lastName.trim().toLowerCase()] = 0;
            }
          }
          for (let i = 0; i < splited.length; i++) {
            if (
              splited[i].includes('has') &&
              splited[i].includes('match') &&
              splited[i].includes('won') &&
              !splited[i].includes(':')
            ) {
              let secondTask = splited[i].split(' ');
              let frontName = '';
              let flag = 'false';
              let count = 0;
              while (flag == 'false') {
                if (secondTask[count] == 'has') {
                  flag = 'true';
                  break;
                } else {
                  frontName += ` ${secondTask[count]}`;
                  count++;
                }
              }
              let lastName = '';
              let flag2 = 'false';
              let count2 = 0;
              while (secondTask.length > count2) {
                if (secondTask[count2] == 'against') {
                  flag2 = 'true';
                }
                if (secondTask[count2] !== 'against' && flag2 == 'true') {
                  lastName += ` ${secondTask[count2]}`;
                }
                count2++;
              }
              if (lastName[lastName.length - 1] == '.') {
                lastName = lastName.slice(0, lastName.length - 1);
              }
              obj[frontName.trim().toLowerCase()] += 10;
              obj[lastName.trim().toLowerCase()] -= 10;
            } else if (
              splited[i].includes('has') &&
              splited[i].includes('match') &&
              splited[i].includes('lost') &&
              !splited[i].includes(':')
            ) {
              let secondTask = splited[i].split(' ');
              let frontName = '';
              let flag = 'false';
              let count = 0;
              while (flag == 'false') {
                if (secondTask[count] == 'has') {
                  flag = 'true';
                  break;
                } else {
                  frontName += ` ${secondTask[count]}`;
                  count++;
                }
              }

              let lastName = '';
              let flag2 = 'false';
              let count2 = 0;
              while (secondTask.length > count2) {
                if (secondTask[count2] == 'against') {
                  flag2 = 'true';
                }
                if (secondTask[count2] !== 'against' && flag2 == 'true') {
                  lastName += ` ${secondTask[count2]}`;
                }
                count2++;
              }
              if (lastName[lastName.length - 1] == '.') {
                lastName = lastName.slice(0, lastName.length - 1);
              }
              obj[frontName.trim().toLowerCase()] -= 10;
              obj[lastName.trim().toLowerCase()] += 10;
            }
          }
          let res = await axios({
            method: 'post',
            url: '/updateLadder',
            data: { data: obj, log: text.value },
          });
          if (res.data.status == '성공') {
            alert('점수가 업데이트 되었습니다');
            window.location.reload();
          } else {
            alert('오늘 점수는 이미 업데이트 되어있습니다');
            window.location.reload();
          }
        } else {
          let text = document.querySelector('.data-input');
          let splited = text.value.split('\n');
          let obj = {};
          // console.log(text.value);
          for (let i = 0; i < splited.length; i++) {
            if (splited[i].includes('battleend')) {
              let secondTask = splited[i].split('|');
              let last = secondTask[secondTask.length - 1];
              obj[secondTask[3].toLowerCase()] = 0;
              obj[secondTask[4].toLowerCase()] = 0;
            }
          }
          for (let i = 0; i < splited.length; i++) {
            if (
              splited[i].includes('battleend') &&
              splited[i].includes('win')
            ) {
              let secondTask = splited[i].split('|');
              let last = secondTask[secondTask.length - 1];
              obj[secondTask[3].toLowerCase()] += 10;
              obj[secondTask[4].toLowerCase()] -= 10;
            } else if (
              splited[i].includes('battleend') &&
              splited[i].includes('loss')
            ) {
              let secondTask = splited[i].split('|');
              let last = secondTask[secondTask.length - 1];
              obj[secondTask[3].toLowerCase()] -= 10;
              obj[secondTask[4].toLowerCase()] += 10;
            }
          }
          // console.log(obj);
          let res = await axios({
            method: 'post',
            url: '/updateLadder',
            data: { data: obj, log: text.value },
          });
          if (res.data.status == '성공') {
            alert('점수가 업데이트 되었습니다');
            window.location.reload();
          } else {
            alert('오늘 점수는 이미 업데이트 되어있습니다');
            window.location.reload();
          }
        }
      };

      //2월 23일부터
      const updateResult2 = async () => {
        sectionHandler();
        document.querySelector('.updating').style.display = 'flex';
        var chk_radio = document.getElementsByName('typical');
        var sel_type = '';
        for (var i = 0; i < chk_radio.length; i++) {
          if (chk_radio[i].checked == true) {
            sel_type = chk_radio[i].value;
          }
        }
        if (sel_type == 'standard') {
          let previousRes = await axios({
            method: 'get',
            url: '/getUserLadder',
          });
          let updated = { ...previousRes.data.data };
          // console.log(updated);
          let text = document.querySelector('.data-input');
          let splited = text.value.split('\n');
          // console.log(previousRes.data.data);
          for (let i = 0; i < splited.length; i++) {
            if (
              splited[i].includes('has') &&
              splited[i].includes('match') &&
              splited[i].includes('won') &&
              !splited[i].includes(':')
            ) {
              let winner = splited[i].split('has')[0].trim().toLowerCase();
              let loser = splited[i]
                .split('against')[1]
                .split('.')[0]
                .trim()
                .toLowerCase();
              let winnerScore = 0;
              let loserScore = 0;
              if (updated[winner]) winnerScore = updated[winner];
              else {
                updated[winner] = 1500;
                winnerScore = 1500;
              }
              if (updated[loser]) loserScore = updated[loser];
              else {
                updated[loser] = 1500;
                loserScore = 1500;
              }
              let ubaiai = 16 + (winnerScore - loserScore) / 25;
              ubaiai = Number(ubaiai.toFixed(3));
              // console.log(ubaiai);
              if (ubaiai > 0) {
                updated[winner] += ubaiai;
                updated[loser] -= ubaiai;
              } else {
                updated[winner] -= ubaiai;
                updated[loser] += ubaiai;
              }
              // console.log(updated);
            } else if (
              splited[i].includes('has') &&
              splited[i].includes('match') &&
              splited[i].includes('lost') &&
              !splited[i].includes(':')
            ) {
              let winner = splited[i].split('has')[0].trim().toLowerCase();
              let loser = splited[i]
                .split('against')[1]
                .split('.')[0]
                .trim()
                .toLowerCase();
              let winnerScore = 0;
              let loserScore = 0;
              if (updated[winner]) winnerScore = updated[winner];
              else {
                updated[winner] = 1500;
                winnerScore = 1500;
              }
              if (updated[loser]) loserScore = updated[loser];
              else {
                updated[loser] = 1500;
                loserScore = 1500;
              }
              let ubaiai = 16 + (winnerScore - loserScore) / 25;
              ubaiai = Number(ubaiai.toFixed(3));
              // console.log(ubaiai);
              if (ubaiai > 0) {
                updated[winner] -= ubaiai;
                updated[loser] += ubaiai;
              } else {
                updated[winner] += ubaiai;
                updated[loser] -= ubaiai;
              }
              // console.log(updated);
            }
          }
          // console.log(updated);
          let res = await axios({
            method: 'post',
            url: '/updateLadder2',
            data: { data: updated, log: text.value },
          });
          if (res.data.status == '성공') {
            alert('점수가 업데이트 되었습니다');
            window.location.reload();
          } else {
            alert('점수가 업데이트에 실패하였습니다');
            // alert('오늘 점수는 이미 업데이트 되어있습니다');
            window.location.reload();
          }
        } else {
          let previousRes = await axios({
            method: 'get',
            url: '/getUserLadder',
          });
          let updated = { ...previousRes.data.data };
          let text = document.querySelector('.data-input');
          let splited = text.value.split('\n');
          for (let i = 0; i < splited.length; i++) {
            if (
              splited[i].includes('battleend') &&
              splited[i].includes('win')
            ) {
              let secondTask = splited[i].split('|');

              let winner = secondTask[3].toLowerCase();
              let loser = secondTask[4].toLowerCase();
              let winnerScore = 0;
              let loserScore = 0;
              if (updated[winner]) winnerScore = updated[winner];
              else {
                updated[winner] = 1500;
                winnerScore = 1500;
              }
              if (updated[loser]) loserScore = updated[loser];
              else {
                updated[loser] = 1500;
                loserScore = 1500;
              }
              let ubaiai = 16 + (winnerScore - loserScore) / 25;
              ubaiai = Number(ubaiai.toFixed(3));
              if (ubaiai > 0) {
                updated[winner] += ubaiai;
                updated[loser] -= ubaiai;
              } else {
                updated[winner] -= ubaiai;
                updated[loser] += ubaiai;
              }
            } else if (
              splited[i].includes('battleend') &&
              splited[i].includes('loss')
            ) {
              let secondTask = splited[i].split('|');
              let winner = secondTask[3].toLowerCase();
              let loser = secondTask[4].toLowerCase();
              let winnerScore = 0;
              let loserScore = 0;
              if (updated[winner]) winnerScore = updated[winner];
              else {
                updated[winner] = 1500;
                winnerScore = 1500;
              }
              if (updated[loser]) loserScore = updated[loser];
              else {
                updated[loser] = 1500;
                loserScore = 1500;
              }
              let ubaiai = 16 + (winnerScore - loserScore) / 25;
              ubaiai = Number(ubaiai.toFixed(3));
              if (ubaiai > 0) {
                updated[winner] -= ubaiai;
                updated[loser] += ubaiai;
              } else {
                updated[winner] += ubaiai;
                updated[loser] -= ubaiai;
              }
            }
          }
          // console.log(updated);
          let res = await axios({
            method: 'post',
            url: '/updateLadder2',
            data: { data: updated, log: text.value },
          });
          if (res.data.status == '성공') {
            alert('점수가 업데이트 되었습니다');
            window.location.reload();
          } else {
            alert('점수가 업데이트에 실패하였습니다');
            // alert('오늘 점수는 이미 업데이트 되어있습니다');
            window.location.reload();
          }
        }
      };

      document
        .querySelector('.upload-section')
        .addEventListener('click', (e) => {
          e.stopPropagation();
        });
    </script>
  </body>
</html>
